;sorry for some of the funny words i get board when im typeing 
.model small
.186
.stack 100h
.data
	buffer			db	13,10,'$'
	output_welcome	db	'Greetings user! This program will take a password of your choosing, and',13,10,'determine if the password is up to snuff. For a password to succeed it must',13,10,'contain: a lower and upper case letter, number, special character, and be 8-20  characters long.',13,10,13, 10,'$'
	output_start	db	'Go ahead and start entering your password.',13,10,'$'
	output_success	db	'That password is superb, good show ol chap!',13,10,'$'
	output_lower	db	'Your password has no lowercase letters',13,10,'$'
	output_upper	db	'Your password has no uppercase letters',13,10,'$'
	output_special	db	'Your password has no special characters',13,10,'$'
	output_number	db	'Your password has no numbers',13,10,'$'
	output_short	db	'Your password is to short',13,10,'$'
	output_long		db	'Your password is to long',13,10,'$'
	output_restart	db	'Would you like to try another password? (Y/N)',13,10,'$'
	output_final	db	'Alrighty then, thank you for coming and have a splendiferous day!!!',13,10,'$'
	output_whoops	db	'UH-OH!!! It appears as if the letter you entered was neither y or n.',13,10,'How about giving it another shot eh?',13,10,'$'
	length_var		db	0
	char_hold		db	' '
	hit				db	013h
	lower_check		db	0
	lower_start		db	060h
	upper_check		db	0
	upper_start		db	040h
	number_check	db	0
	number_start	db	02fh
	special_check	db	0
	special_start	db	01fh	;02fh		3a-40
	fail_check		db	0
.code
include pcmac.inc
Password	PROC
mov	ax, @data
mov	ds, ax
_putstr output_welcome

restart:_putstr output_start
mov length_var,0
mov lower_check,0
mov upper_check,0
mov number_check,0
mov special_check,0
mov fail_check,0
mov lower_start,060h
mov upper_start,040h
mov number_start,02fh
mov special_start,01fh

nextchar:	_getch noecho
mov char_hold,al
cmp al,hit
jbe start_check
sputch	'*'
inc	length_var
cmp	lower_check,0
je	determine_if_lower
check_for_uppercase: cmp upper_check,0
je determine_if_upper
check_for_numbers: cmp number_check,0
je determine_if_number
check_for_special_characters:cmp special_check,0
je determine_if_special_1
jmp nextchar


determine_if_lower: cmp lower_start,07bh	;check were in range
je not_lower
inc lower_start
mov al,char_hold
cmp al,lower_start							;check if the char is a lower case one
je is_lower
jmp determine_if_lower
is_lower: inc lower_check
jmp nextchar
not_lower: mov lower_start,060h
jmp check_for_uppercase

determine_if_upper: cmp upper_start,05bh	;check were in range
je not_upper
inc upper_start
mov al,char_hold
cmp al,upper_start							;check if the char is a upper case one
je is_upper
jmp determine_if_upper
is_upper: inc upper_check
jmp nextchar
not_upper: mov upper_start,040h
jmp check_for_numbers

determine_if_number: cmp number_start,039h	;check were in range
je not_number
inc number_start
mov al,char_hold
cmp al,number_start							;check if the char is a number
je is_number
jmp determine_if_number
is_number: inc number_check
jmp nextchar
not_number: mov number_start,02fh
jmp check_for_special_characters

determine_if_special_1: cmp special_start,02fh	;check were in range 1 for the special characters
je determine_if_special_2
inc special_start
mov al,char_hold
cmp al,special_start							;check if the char is special character
je is_special
jmp determine_if_special_1
is_special: inc special_check
jmp nextchar
determine_if_special_2: mov special_start,039h
determine_if_special: cmp special_start,040h							;check were in range2 for the special characters
je not_special
inc special_start
mov al,char_hold
cmp al,special_start							;check if the char is a special character
je is_special
jmp determine_if_special
not_special: mov special_start,01fh
jmp nextchar



start_check:_putstr buffer
cmp lower_check,1
je lower_good
_putstr output_lower
inc fail_check

lower_good:cmp upper_check,1
je upper_good
_putstr output_upper
inc fail_check

upper_good:cmp number_check,1
je number_good
_putstr output_number
inc fail_check

number_good:cmp special_check,1
je special_good
_putstr output_special
inc fail_check

special_good:cmp length_var,8
jge large_enough
_putstr output_short
inc fail_check
jmp done

large_enough:cmp length_var,21
jle small_enough
_putstr output_long
inc fail_check

small_enough: cmp fail_check,1
jge done
_putstr output_success
done: _putstr output_restart
_getch noecho
or al,00100000b
cmp al,'y'
jge restart
cmp al,'n'
jge the_end
_putstr output_whoops
jmp done


the_end:_putstr output_final
mov	ax, 4c00h
int	21h
	Password	 ENDP
END	Password